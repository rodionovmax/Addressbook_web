###### 6.2 ####################################################
1. Created group generator

###### 6.3 ####################################################
1. Installed jcommander

###### 6.4 ####################################################
1. New way to create data providers
@DataProvider
    public Iterator<Object[]> validGroups() {
        List<Object[]> list = new ArrayList<Object[]>();
        list.add(new Object[] {"test1", "header 1", "footer 1"});
        list.add(new Object[] {"test2", "header 2", "footer 2"});
        list.add(new Object[] {"test3", "header 3", "footer 3"});
        return list.iterator();
    }

2. Using GroupData object
@DataProvider
    public Iterator<Object[]> validGroups() {
        List<Object[]> list = new ArrayList<Object[]>();
        list.add(new Object[] {new GroupData().withName("test1").withHeader("header 1").withFooter("footer 1")});
        list.add(new Object[] {new GroupData().withName("test2").withHeader("header 2").withFooter("footer 2")});
        list.add(new Object[] {new GroupData().withName("test3").withHeader("header 3").withFooter("footer 3")});
        return list.iterator();
    }

###### 6.5 ####################################################
1. Created method-reader that getting parameters from file
@DataProvider
    public Iterator<Object[]> validGroupsUsingFile() throws IOException {
        List<Object[]> list = new ArrayList<Object[]>();
        BufferedReader reader = new BufferedReader(new FileReader(new File("src/test/resources/groups.csv")));
        String line = reader.readLine();
        while (line != null){
            String[] split = line.split(";");
            list.add(new Object[] {new GroupData().withName(split[0]).withHeader(split[1]).withFooter(split[2])});
            line = reader.readLine();
        }
        return list.iterator();
    }

###### 6.6 ####################################################
1. In GroupDataGenerator created method that generates xml file using XStream library
private void saveAsXml(List<GroupData> groups, File file) throws IOException {
        XStream xstream = new XStream(new DomDriver());
        xstream.processAnnotations(GroupData.class);
//        xstream.alias("group", GroupData.class);
        String xml = xstream.toXML(groups);
        Writer writer = new FileWriter(file);
        writer.write(xml);
        writer.close();
    }

2. In GroupCreationTests created method to read xml file and use it as parameters using XStream library
@DataProvider
    public Iterator<Object[]> validGroupsUsingXmlFile() throws IOException {
        BufferedReader reader = new BufferedReader(new FileReader(new File("/Users/max/sandbox/Addressbook/addressbook/src/test/resources/groups.xml")));
        String xml = "";
        String line = reader.readLine();
        while (line != null){
            xml += line;
            line = reader.readLine();
        }
        XStream xstream = new XStream(new DomDriver());
        xstream.processAnnotations(GroupData.class);
        List<GroupData> groups = (List<GroupData>) xstream.fromXML(xml);
        return groups.stream().map((g) -> new Object[] {g}).collect(Collectors.toList()).iterator();
    }

###### 6.7 ####################################################
1. In GroupDataGenerator created method that generates json file using Gson library
private void saveAsJson(List<GroupData> groups, File file) throws IOException {
        Gson gson = new GsonBuilder().setPrettyPrinting().excludeFieldsWithoutExposeAnnotation().create();
        String json = gson.toJson(groups);
        Writer writer = new FileWriter(file);
        writer.write(json);
        writer.close();
    }

2. In GroupCreationTests created method to read json file and use it as parameters using Gson library
@DataProvider
    public Iterator<Object[]> validGroupsFromJson() throws IOException {
        BufferedReader reader = new BufferedReader(new FileReader(new File("/Users/max/sandbox/Addressbook/addressbook/src/test/resources/groups.json")));
        String json = "";
        String line = reader.readLine();
        while (line != null){
            json += line;
            line = reader.readLine();
        }
        Gson gson = new Gson();
        List<GroupData> groups = gson.fromJson(json, new TypeToken<List<GroupData>>(){}.getType());
        return groups.stream().map((g) -> new Object[] {g}).collect(Collectors.toList()).iterator();
    }

###### 6.8 ####################################################
1. Auto-closing files after everything has been red or written.
In order to auto-close put everything inside try(). Necessary when writing to a file. Or use writer.close();